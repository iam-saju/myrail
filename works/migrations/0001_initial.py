# Generated by Django 5.2.5 on 2025-08-09 17:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('verified', models.BooleanField(default=False)),
                ('followers_count', models.PositiveIntegerField(default=0)),
                ('following_count', models.PositiveIntegerField(default=0)),
                ('total_likes', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('country', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('description', models.TextField(blank=True)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='destinations/')),
                ('has_3d_model', models.BooleanField(default=False)),
                ('model_type', models.CharField(choices=[('island', 'Floating Island'), ('city', 'City Scene'), ('mountain', 'Mountain Landscape'), ('beach', 'Beach Scene'), ('temple', 'Temple/Monument'), ('custom', 'Custom Model')], default='island', max_length=50)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('visits_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=500)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostShare',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('platform', models.CharField(choices=[('native', 'Native Share'), ('instagram', 'Instagram'), ('twitter', 'Twitter'), ('facebook', 'Facebook'), ('whatsapp', 'WhatsApp'), ('telegram', 'Telegram'), ('copy_link', 'Copy Link')], default='native', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostTagRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('view_duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TravelPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video', models.FileField(upload_to='videos/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails/')),
                ('description', models.TextField(max_length=500)),
                ('music_name', models.CharField(blank=True, max_length=200)),
                ('music_artist', models.CharField(blank=True, max_length=200)),
                ('featured_3d', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size_mb', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('show_3d_content', models.BooleanField(default=True)),
                ('auto_play_videos', models.BooleanField(default=True)),
                ('show_trending', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrendingDestination',
            fields=[
                ('destination', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='works.destination')),
                ('score', models.FloatField(default=0.0)),
                ('posts_last_24h', models.PositiveIntegerField(default=0)),
                ('posts_last_week', models.PositiveIntegerField(default=0)),
                ('engagement_rate', models.FloatField(default=0.0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-score'],
            },
        ),
        migrations.AddIndex(
            model_name='destination',
            index=models.Index(fields=['country'], name='works_desti_country_a1a5dc_idx'),
        ),
        migrations.AddIndex(
            model_name='destination',
            index=models.Index(fields=['posts_count'], name='works_desti_posts_c_29f56d_idx'),
        ),
        migrations.AddIndex(
            model_name='destination',
            index=models.Index(fields=['-created_at'], name='works_desti_created_b13a50_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='destination',
            unique_together={('name', 'country')},
        ),
        migrations.AddField(
            model_name='postcomment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='works.postcomment'),
        ),
        migrations.AddField(
            model_name='postcomment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postlike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postshare',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='posttagrelation',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_relations', to='works.posttag'),
        ),
        migrations.AddField(
            model_name='postview',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='viewed_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='travelpost',
            name='destination',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='works.destination'),
        ),
        migrations.AddField(
            model_name='travelpost',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postview',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='works.travelpost'),
        ),
        migrations.AddField(
            model_name='posttagrelation',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_relations', to='works.travelpost'),
        ),
        migrations.AddField(
            model_name='postshare',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='works.travelpost'),
        ),
        migrations.AddField(
            model_name='postlike',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='works.travelpost'),
        ),
        migrations.AddField(
            model_name='postcomment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='works.travelpost'),
        ),
        migrations.AddField(
            model_name='userfollow',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfollow',
            name='following',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userpreference',
            name='favorite_tags',
            field=models.ManyToManyField(blank=True, to='works.posttag'),
        ),
        migrations.AddField(
            model_name='userpreference',
            name='preferred_destinations',
            field=models.ManyToManyField(blank=True, to='works.destination'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['user', '-created_at'], name='works_trave_user_id_9584f4_idx'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['destination', '-created_at'], name='works_trave_destina_111a49_idx'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['-likes_count'], name='works_trave_likes_c_86f43f_idx'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['-views_count'], name='works_trave_views_c_dd4802_idx'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['featured_3d'], name='works_trave_feature_caed39_idx'),
        ),
        migrations.AddIndex(
            model_name='travelpost',
            index=models.Index(fields=['is_featured'], name='works_trave_is_feat_8796aa_idx'),
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['post', '-created_at'], name='works_postv_post_id_2f3b2d_idx'),
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['user', '-created_at'], name='works_postv_user_id_03797d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='posttagrelation',
            unique_together={('post', 'tag')},
        ),
        migrations.AddIndex(
            model_name='postshare',
            index=models.Index(fields=['post', '-created_at'], name='works_posts_post_id_5a68db_idx'),
        ),
        migrations.AddIndex(
            model_name='postshare',
            index=models.Index(fields=['platform'], name='works_posts_platfor_15edd1_idx'),
        ),
        migrations.AddIndex(
            model_name='postlike',
            index=models.Index(fields=['user', '-created_at'], name='works_postl_user_id_93c8ca_idx'),
        ),
        migrations.AddIndex(
            model_name='postlike',
            index=models.Index(fields=['post', '-created_at'], name='works_postl_post_id_920792_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postlike',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['post', '-created_at'], name='works_postc_post_id_bc0858_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['user', '-created_at'], name='works_postc_user_id_c2cfe2_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower', '-created_at'], name='works_userf_followe_863e0e_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following', '-created_at'], name='works_userf_followi_acb6b0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
    ]
